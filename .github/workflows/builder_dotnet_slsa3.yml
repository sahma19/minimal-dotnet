name: Dotnet Builder â€“ SLSA3

on:
  workflow_call:
    inputs:
      solution: { required: true, type: string }
      project: { required: true, type: string }
      configuration: { required: true, type: string }
      dockerfile: { required: true, type: string }
      sdk-version: { required: false, type: string }
      runtime-version: { required: false, type: string }
      dry-run: { required: false, type: string, default: "false" }
      rekor-log-public: { required: false, type: boolean, default: true }
    secrets:
      github-token: { required: true }

jobs:
  setup:
    runs-on: ubuntu-latest
    permissions:
      contents: "write"
      packages: "write"
      id-token: "write"
      attestations: "write"
      actions: "read"
      security-events: "write"
    outputs:
      slsa-token: ${{ steps.slsa-setup.outputs.slsa-token }}
    steps:
      - name: SLSA Setup
        id: slsa-setup
        uses: slsa-framework/slsa-github-generator/actions/delegator/setup-generic@v2.1.0
        with:
          slsa-workflow-recipient: "delegator_generic_slsa3.yml"
          slsa-rekor-log-public: ${{ inputs.rekor-log-public }}
          slsa-runner-label: "ubuntu-latest"
          slsa-build-action-path: ".github/actions/dotnet-tca"
          slsa-workflow-inputs: ${{ toJson(inputs) }}
          slsa-workflow-masked-inputs: project

  run:
    needs: setup
    outputs:
      attestations-download-name: ${{ steps.build.outputs.attestations-download-name }}
      attestations-download-sha256: ${{ steps.build.outputs.attestations-download-sha256 }}
      build-artifacts-outputs: ${{ steps.build.outputs.build-artifacts-outputs }}
    permissions:
      contents: "write"
      packages: "write"
      id-token: "write"
      attestations: "write"
      actions: "read"
      security-events: "write"
    uses: slsa-framework/slsa-github-generator/.github/workflows/delegator_generic_slsa3.yml@v2.1.0
    with:
      slsa-token: ${{ needs.setup.outputs.slsa-token }}
    secrets:
      secret1: ${{ secrets.github-token }}

  publish:
    needs: run
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Needed to upload to GitHub Release

    steps:
      - name: Securely download attestations
        uses: ./.github/actions/secure-attestations-download
        with:
          name: ${{ needs.run.outputs.attestations-download-name }}
          sha256: ${{ needs.run.outputs.attestations-download-sha256 }}
          path: ./attestations

      - name: Upload attestations to GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ github.ref_name }}
        run: |
          find ./attestations -type f | tee ./FILES
          while IFS= read -r file; do
            gh release upload "$TAG" "$file"
          done < FILES
