name: Dotnet Builder â€“ SLSA3

on:
  workflow_call:
    inputs:
      solution: { required: true, type: string }
      project: { required: true, type: string }
      configuration: { required: true, type: string }
      dockerfile: { required: true, type: string }
      sdk-version: { required: false, type: string }
      runtime-version: { required: false, type: string }
      dry-run: { required: false, type: string, default: "false" }
      rekor-log-public: { required: false, type: boolean, default: true }
    secrets:
      github-token: { required: true }

jobs:
  setup:
    runs-on: ubuntu-latest
    permissions:
      id-token: write # For signing.
      contents: write # For asset uploads.
      packages: write # For package uploads.
      actions: read # For the entrypoint.
    outputs:
      slsa-token: ${{ steps.slsa-setup.outputs.slsa-token }}
    steps:
      - name: SLSA Setup
        id: slsa-setup
        uses: slsa-framework/slsa-github-generator/actions/delegator/setup-generic@v2.1.0
        with:
          slsa-workflow-recipient: "delegator_generic_slsa3.yml"
          slsa-rekor-log-public: ${{ inputs.rekor-log-public }}
          slsa-runner-label: "ubuntu-latest"
          slsa-build-action-path: ".github/actions/dotnet-tca"
          slsa-workflow-inputs: ${{ toJson(inputs) }}
          slsa-workflow-masked-inputs: project

  run:
    needs: setup
    permissions:
      id-token: write # For signing.
      contents: write # For asset uploads.
      packages: write # For package uploads.
      actions: read # For the entrypoint.
    uses: slsa-framework/slsa-github-generator/.github/workflows/delegator_generic_slsa3.yml@v2.1.0
    with:
      slsa-token: ${{ needs.setup.outputs.slsa-token }}
    secrets:
      secret1: ${{ github.token }}
