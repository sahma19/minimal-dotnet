name: Build Docker images for all dotnet projects

on:
  workflow_call:
    inputs:
      dry-run:
        required: true
        type: string
      is-dependabot:
        required: true
        type: string

permissions:
  contents: "read"
  packages: "write"
  id-token: "write"
  attestations: "write"
  actions: "read"
  security-events: "write"

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      builds: ${{ env.builds }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Build matrix
        shell: bash
        run: |
          find examples -maxdepth 2 -name '*.sln' | while read -r solution; do
            solution_dir=$(dirname "$solution")
            grep -Eo '"[^"]+\.csproj"' "$solution" | tr -d '"' \
              | grep -Ev '/?(Test|test|Tests)[^/]*\.csproj$' | while read -r project_path; do
              normalized_project_path=$(realpath "$solution_dir/$(printf '%s' "$project_path" | sed 's|\\|/|g')")
              printf '{"solution":"%s","project":"%s"}\n' "$solution" "$normalized_project_path"
            done
          done | jq -sc > /tmp/matrix.json
          
          echo "builds=$(cat /tmp/matrix.json)" >> "$GITHUB_ENV"

  build:
    needs: generate-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        build: ${{ fromJson(needs.generate-matrix.outputs.builds) }}

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Dotnet â€“ Build & push
        uses: ./.github/actions/dotnet-build
        with:
          solution: ${{ matrix.build.solution }}
          project:  ${{ matrix.build.project }}
          dry-run:  ${{ inputs.dry-run }}