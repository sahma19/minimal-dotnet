name: Build Docker images for all dotnet projects

on:
  workflow_call:
    inputs:
      dry-run:
        required: true
        type: string
      is-dependabot:
        required: true
        type: string

permissions:
  contents: "read"
  packages: "write"
  id-token: "write"
  attestations: "write"
  actions: "read"
  security-events: "write"

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      builds: ${{ env.builds }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Build matrix
        shell: bash
        run: |
          for sol in $(find examples -maxdepth 2 -name '*.sln'); do
            dir=$(dirname "$sol")
            dockerfile="$dir/Dockerfile"
            cfg=$(basename "$dir")
            tag="$(echo $cfg | tr '[:upper:]' '[:lower:]')"   # ← image tag
            jq -n \
              --arg df "$dockerfile" \
              --arg ctx "$dir" \
              --arg tag "$tag" \
              '{dockerfile:$df, context:$ctx, imageTag:$tag, buildArgs:""}'
          done | jq -sc > /tmp/matrix.json
          echo "builds=$(cat /tmp/matrix.json)" >> "$GITHUB_ENV"

  build:
    needs: generate-matrix
    permissions:
      contents: "write"
      packages: "write"
      id-token: "write"
      attestations: "write"
      actions: "read"
      security-events: "write"
    secrets:
      github-token: ${{ secrets.GITHUB_TOKEN }}
    uses: ./.github/workflows/builder_dotnet_slsa3.yml
    strategy:
      fail-fast: false
      matrix:
        build: ${{ fromJson(needs.generate-matrix.outputs.builds) }}
    with:
      dockerfile: ${{ matrix.build.dockerfile }}
      context: ${{ matrix.build.context }}
      build-args: ${{ matrix.build.buildArgs }}
      image-tag: ${{ matrix.build.imageTag }}

  publish-image:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        build: ${{ fromJson(needs.generate-matrix.outputs.builds) }}

    permissions:
      contents: read
      packages: write

    steps:
      - name: Push image to GHCR
        uses: ./.github/actions/docker-publish-only
        with:
          artifact-name: ${{ needs.build.outputs.oci-download-name }}
          artifact-sha256: ${{ needs.build.outputs.oci-download-sha256 }}
          image-tag: ${{ matrix.build.imageTag }}
